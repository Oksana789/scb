# t or tPar is the second dimension
mockCorHats = computeAllCorHats(tParArray = mockTParArray,
lagCount = myLagCount,
sample = mockSample,
kernel = kernel,
bandwidth = 1)
# print the first 9 elements. Hope, sizes are greater than 3.
cat("str(mockCorHats) = ", str(mockCorHats), "\n")
lag = 1
mockCorHatsSecCol <- eval(parse(text = paste0("mockCorHats$`", lag, "`")))
cat("The second col of mockCorHats = ", mockCorHatsSecCol, "\n")
# same but by steps
colRefName = paste0("mockCorHats$`", lag, "`")
parsedColRefName = parse (colRefName)
evaluatedColumn = eval (parsedColRefName)
cat("colRefName = ", colRefName, "\n")
cat("parsedColRefName = ", parsedColRefName, "\n")
cat("evaluatedColumn = ", evaluatedColumn, "\n")
cat("The second col of mockCorHats = ", mockCorHatsSecCol, "\n")
}
test_that("Testing \'computeAllCorHats\'",
computeAllCorHatsTestFunction()  )
# lagIndexToRefer <- eval(parse(text = paste0("allCorHats$`", lagIndex + 1, "`")))
library(testthat)
computeAllCorHatsTestFunction = function () {
cat("\n Testing \'computeAllCorHats\' \n")
tParCount = 10
mockTParArray <- createTParArray(tParCount = tParCount)
mockTVMA1CoefArray <- createTVMA1CoefArray(coefFunction = sin,
tParArray = mockTParArray)
mockNoise <- createNoise(sampleSize = tParCount,
mean = 0,
sd = 1)
mockTVMA1Array <- createTVMA1CoefArray(coefFunction = sin,
tParArray = mockTParArray)
mockSample <- createSample(model = createTVMA1,
tvMA1CoefArray = mockTVMA1Array,
noise = mockNoise)
myLagCount = tParCount - 1
kernel = normalDifferenceKernel
bandwidth = 1
# this should return double array
# lag is the first dimension
# t or tPar is the second dimension
mockCorHats = computeAllCorHats(tParArray = mockTParArray,
lagCount = myLagCount,
sample = mockSample,
kernel = kernel,
bandwidth = 1)
# print the first 9 elements. Hope, sizes are greater than 3.
cat("str(mockCorHats) = ", str(mockCorHats), "\n")
lag = 1
mockCorHatsSecCol <- eval(parse(text = paste0("mockCorHats$`", lag, "`")))
cat("The second col of mockCorHats = ", mockCorHatsSecCol, "\n")
# same but by steps
colRefName = paste0("mockCorHats$`", lag, "`")
parsedColRefName = parse (colRefName)
evaluatedColumn = eval (parsedColRefName)
cat("colRefName = ", colRefName, "\n")
cat("parsedColRefName = ", parsedColRefName, "\n")
cat("evaluatedColumn = ", evaluatedColumn, "\n")
cat("The second col of mockCorHats = ", mockCorHatsSecCol, "\n")
}
test_that("Testing \'computeAllCorHats\'",
computeAllCorHatsTestFunction()  )
# lagIndexToRefer <- eval(parse(text = paste0("allCorHats$`", lagIndex + 1, "`")))
source("../util/sourceDir.R")
sourceDir(path = "./R/")
source ("tests/testthat/tests_12_computeAllCorHats.R")
?parse
computeAllCorHatsTestFunction = function () {
cat("\n Testing \'computeAllCorHats\' \n")
tParCount = 10
mockTParArray <- createTParArray(tParCount = tParCount)
mockTVMA1CoefArray <- createTVMA1CoefArray(coefFunction = sin,
tParArray = mockTParArray)
mockNoise <- createNoise(sampleSize = tParCount,
mean = 0,
sd = 1)
mockTVMA1Array <- createTVMA1CoefArray(coefFunction = sin,
tParArray = mockTParArray)
mockSample <- createSample(model = createTVMA1,
tvMA1CoefArray = mockTVMA1Array,
noise = mockNoise)
myLagCount = tParCount - 1
kernel = normalDifferenceKernel
bandwidth = 1
# this should return double array
# lag is the first dimension
# t or tPar is the second dimension
mockCorHats = computeAllCorHats(tParArray = mockTParArray,
lagCount = myLagCount,
sample = mockSample,
kernel = kernel,
bandwidth = 1)
# print the first 9 elements. Hope, sizes are greater than 3.
cat("str(mockCorHats) = ", str(mockCorHats), "\n")
lag = 1
mockCorHatsSecCol <- eval(parse(text = paste0("mockCorHats$`", lag, "`")))
cat("The second col of mockCorHats = ", mockCorHatsSecCol, "\n")
# same but by steps
colRefName = paste0("mockCorHats$`", lag, "`")
parsedColRefName = parse (text = colRefName)
evaluatedColumn = eval (parsedColRefName)
cat("colRefName = ", colRefName, "\n")
cat("parsedColRefName = ", parsedColRefName, "\n")
cat("evaluatedColumn = ", evaluatedColumn, "\n")
cat("The second col of mockCorHats = ", mockCorHatsSecCol, "\n")
}
test_that("Testing \'computeAllCorHats\'",
computeAllCorHatsTestFunction()  )
# lagIndexToRefer <- eval(parse(text = paste0("allCorHats$`", lagIndex + 1, "`")))
colRefName = paste0("mockCorHats$`", lag, "`")
parsedColRefName = parse (text = colRefName)
colRefName = paste0("mockCorHats$`", lag, "`")
parsedColRefName = parse (text = colRefName)
evaluatedColumn = eval (parsedColRefName)
if (! require ("testthat"))
install.packages ("testthat")
library ("testthat")
"C:/Users/Boris/OneDrive/text/toronto_u/research/zhou/r/SCB/SCB"
getwd()
source("../util/sourceDir.R")
sourceDir(path = "./R/")
source ("tests/testthat/tests_12_computeAllCorHats.R")
library(SCB)
devtools::load_all(".")
library(SCB)
library(SCB)
library(SCB)
?remove.packages()
remove.packages("testthat")
library(testthat)
devtools::install_deps(".")
read.table(file.path(R.home(), "etc", "repositories"), sep = "\t")
library(testthat)
install.packages("testthat", dependencies = T)
library(testthat)
library(testthat)
devtools::install_deps(".")
devtools::load_all(".")
library(testthat)
library(testthat)
install.packages("testthat", dependencies = T)
library(testthat)
library(SCB)
library(SCB)
install.packages("catboost")
devtools::install_github('catboost/catboost', subdir = 'catboost/R-package')
devtools::install_github('catboost/catboost', subdir = 'catboost/R-package')
devtools::install_github('catboost/catboost', subdir = 'catboost/R-package')
devtools::install_github('catboost/catboost', subdir = 'catboost/R-package')
cd "C://Dropbox/tmp/catboost-master/catboost/"
setwd "C://Dropbox/tmp/catboost-master/catboost/"
setwd ("C://Dropbox/tmp/catboost-master/catboost/")
devtools::install()
devtools::build()
setwd("R-package/")
devtools::install()
devtools::build()
library(SCB)
library(SCB)
devtools::load_all(".")
corArray <- array(0, dim = 10)
corArray
corArray <- 2
corArray
corArray <- array(0, dim = 10)
counter <- 1:10
apply(corArray, 1/counter)
apply(corArray, function() <- 1/counter)
apply(corArray, function(counter) <- 1/counter)
apply(corArray, function(counter) 1/counter)
apply(corArray, 1/counter)
?apply
corArray <- 1/counter
corArray
library(SCB)
devtools::load_all(".")
?SCB::computeBetaLRVHat()
?SCB::computeBetaLRVHat
?computeBetaLRVHat
??computeBetaLRVHat
roxygen2::roxygenise()
setwd("R")
roxygen2::roxygenise()
roxygen2::roxygenise(".")
setwd("..")
getwd()
roxygen2::roxygenise(clean = T)
roxygen2::roxygenise(load_code = T)
roxygen2::roxygenise(package.dir = ".")
roxygen2::roxygenise(package.dir = "R")
devtools::document()
devtools::document()
update.packages("devtools")
update.packages("roxygen2")
library(devtools)
library(roxygen2)
library(SCB)
library(SCB)
devtools::load_all(".")
devtools::document()
devtools::install_github("klutometis/roxygen")
roxygen2::roxygenise()
roxygen2::roxygenize()
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("roxygen2", dependencies = T)
data(mpg)
library(MASS)
data(mpg)
library(ggplot2)
data("mpg")
str(mpg))
str(mpg)
str(mpg$class)
mpg$class
table(mpg$class, mpg$drv)
library(tidyverse)
library(forcats)
library(wpp2015)
install.packages("wpp2015")
install.packages("ggjoy")
library(viridis)
library(extrafont)
install.packages("extrafont")
library(wpp2015)
library(ggjoy)
library(viridis)
library(extrafont)
data(UNlocations)
UNlocations
dim(UNlocations)
countries <- UNlocations %>%
filter(location_type == 4) %>%
transmute(name = name %>% paste()) %>%
as_vector()
countries
data(e0M)
e0M %>%
filter(country %in% countries) %>%
select(-last.observed) %>%
gather(period, value, 3:15) %>%
ggplot(aes(x = value, y = period %>% fct_rev()))+
geom_joy(aes(fill = period))+
scale_fill_viridis(discrete = T, option = "B", direction = -1,
begin = .1, end = .9)+
labs(x = "Male life expectancy at birth",
y = "Period",
title = "The world convergence in male life expectancy at birth since 1950",
subtitle = "Data: UNPD World Population Prospects 2015 Revision",
caption = "ikashnitsky.github.io")+
theme_minimal(base_family =  "Roboto Condensed", base_size = 15)+
theme(legend.position = "none")
e0M %>%
filter(country %in% countries) %>%
select(-last.observed) %>%
gather(period, value, 3:15) %>%
ggplot(aes(x = value, y = period %>% fct_rev()))+
geom_joy(aes(fill = period))+
scale_fill_viridis(discrete = T, option = "C", direction = -1,
begin = .1, end = .9)+
labs(x = "Male life expectancy at birth",
y = "Period",
title = "The world convergence in male life expectancy at birth since 1950",
subtitle = "Data: UNPD World Population Prospects 2015 Revision",
caption = "ikashnitsky.github.io")+
theme_minimal(base_family =  "Roboto Condensed", base_size = 15)+
theme(legend.position = "none")
e0M %>%
filter(country %in% countries) %>%
select(-last.observed) %>%
gather(period, value, 3:15) %>%
ggplot(aes(x = value, y = period %>% fct_rev()))+
geom_joy(aes(fill = period))+
scale_fill_viridis(discrete = T, option = "A", direction = -1,
begin = .1, end = .9)+
labs(x = "Male life expectancy at birth",
y = "Period",
title = "The world convergence in male life expectancy at birth since 1950",
subtitle = "Data: UNPD World Population Prospects 2015 Revision",
caption = "ikashnitsky.github.io")+
theme_minimal(base_family =  "Roboto Condensed", base_size = 15)+
theme(legend.position = "none")
library(SCB)
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
devtools::load_all(".")
?computeAllCorHats()
?computeB
?computeBetaLRVHat
?computeCor
library(caret)
install.packages("caret", dependencies = T)
library(caret)
library(caret)
names(getModelInfo())
urlfile <-'https://raw.githubusercontent.com/hadley/fueleconomy/master/data-raw/vehicles.csv'
x <- getURL(urlfile, ssl.verifypeer = FALSE)
library(RCurl)
install.packages("RCurl")
library(RCurl)
urlfile <-'https://raw.githubusercontent.com/hadley/fueleconomy/master/data-raw/vehicles.csv'
x <- getURL(urlfile, ssl.verifypeer = FALSE)
vehicles <- read.csv(textConnection(x))
vehicles <- vehicles[names(vehicles)[1:24]]
vehicles <- data.frame(lapply(vehicles, as.character), stringsAsFactors=FALSE)
vehicles <- data.frame(lapply(vehicles, as.numeric))
vehicles[is.na(vehicles)] <- 0
vehicles$cylinders <- ifelse(vehicles$cylinders == 6, 1,0)
vehicles
prop.table(table(vehicles$cylinders))
set.seed(1234)
vehicles <- vehicles[sample(nrow(vehicles)),]
vehicles
split <- floor(nrow(vehicles)/3)
ensembleData <- vehicles[0:split,]
set.seed(1234)
blenderData <- vehicles[(split+1):(split*2),]
testingData <- vehicles[(split*2+1):nrow(vehicles),]
labelName <- 'cylinders'
predictors <- names(ensembleData)[names(ensembleData) != labelName]
predictors
myControl <- trainControl(method='cv', number=3, returnResamp='none')
test_model <- train(blenderData[,predictors],
blenderData[,labelName],
method='gbm',
trControl=myControl)
preds <- predict(object=test_model,
testingData[,predictors])
preds
library(pROC)
auc <- roc(testingData[,labelName], preds)
auc
print(auc$auc) # Area under the curve: 0.9896
library(rpart)
library(treebag)
model_gbm <- train(ensembleData[,predictors],
ensembleData[,labelName],
method='gbm', trControl=myControl)
model_rpart <- train(ensembleData[,predictors],
ensembleData[,labelName],
method='rpart', trControl=myControl)
model_treebag <- train(ensembleData[,predictors],
ensembleData[,labelName],
method='treebag', trControl=myControl)
testingData$gbm_PROB <- predict(object=model_gbm,
testingData[,predictors])
testingData$rf_PROB <- predict(object=model_rpart,
testingData[,predictors])
testingData$treebag_PROB <- predict(object=model_treebag,
testingData[,predictors])
auc <- roc(testingData[,labelName], testingData$gbm_PROB )
print(auc$auc) # Area under the curve: 0.9893
auc <- roc(testingData[,labelName], testingData$rf_PROB )
print(auc$auc) # Area under the curve: 0.958
auc <- roc(testingData[,labelName], testingData$treebag_PROB )
print(auc$auc) # Area under the curve: 0.9734
testingData$gbm_PROB
testingData$rf_PROB
predictors <- names(blenderData)[names(blenderData) != labelName]
final_blender_model <- train(blenderData[,predictors], blenderData[,labelName], method='gbm', trControl=myControl)
preds <- predict(object=final_blender_model, testingData[,predictors])
auc <- roc(testingData[,labelName], preds)
print(auc$auc)  # Area under the curve: 0.9922
?rnorm
?stat.anova()
pi
library(Ryacas)
x <- Sym("x")
K = function (x) {
2*(2*pi)^(-1/2) * exp (-(x^2) / 2) -
(2*pi)^(-1/2) * exp (-((x/sqrt(2))^2) / 2) / sqrt (2)
}
KDerive <- Ryacas::yacas(deriv(K(x), x))
KDerive$text
library(Ryacas)
x <- Sym("x")
K = function (x) {
2*(2*pi)^(-1/2) * exp (-(x^2) / 2) -
(2*pi)^(-1/2) * exp (-((x/sqrt(2))^2) / 2) / sqrt (2)
}
KDerive <- Ryacas::yacas(deriv(K(x), x))
KDerive$text
lowBound <- -1
upBound <- 1
KDerivIntegrated <- Ryacas::Integrate.default(f = KDerive$text,
x = x,
a = lowBound,
b = upBound)
as.numeric (KDerivIntegrated)
as.character.Sym (KDerivIntegrated)
print(yacas(KDerivIntegrated))
KDerivIntegrated <- Ryacas::Integrate.default(f = KDerive$text,
x = x,
a = lowBound,
b = upBound)
KDerivIntegrated
print(yacas(KDerivIntegrated))
yacas(KDerivIntegrated)
as.character.Sym(KDerivIntegrated)
kDerivIndefiniteIntegral <- Ryacas::Integrate.default(f = KDerive$tex,
x = x
)
print(yacas(kDerivIndefiniteIntegral))
kDerivIndefiniteIntegralAsCh <- Ryacas::as.character.Expr(kDerivIndefiniteIntegral)
kDerivIndefiniteIntegralAsCh
yacas("myExprCubeDerivAsCh := 3 * x^2")
yacas("TeXForm(myExprCubeDerivAsCh)", retclass = "unquote")
as.character.Sym(KDerivIntegrated)
print(yacas(KDerivIntegrated))
print(yacas("TeXForm(KDerivIntegrated)"))
kDerivIndefiniteIntegral <- Ryacas::Integrate.default(f = KDerive$tex,
x = x)
kDerivIndefiniteIntegral
print(yacas("TeXForm(kDerivIndefiniteIntegral)"))
print(yacas(kDerivIndefiniteIntegral))
print(yacas("TeXForm(kDerivIndefiniteIntegral)"))
as.character.Sym(KDerivIntegrated)
yacas("PrettyForm(kDerivIndefiniteIntegral)")
x <- Sym("x")
K = function (x) {
2*(2*pi)^(-1/2) * exp (-(x^2) / 2) -
(2*pi)^(-1/2) * exp (-((x/sqrt(2))^2) / 2) / sqrt (2)
}
KDerive <- Ryacas::yacas(deriv(K(x), x))
KDerive$text
lowBound <- -1
upBound <- 1
KDerivIntegrated <- Ryacas::Integrate.default(f = KDerive$text,
x = x,
a = lowBound,
b = upBound)
as.character.Sym(KDerivIntegrated)
print(yacas("TeXForm(KDerivIntegrated)"))
class(KDerivIntegrated)
Ryacas::Eval(KDeriveIntegrated)
Ryacas::Eval(yacas(KDeriveIntegrated))
KDerivIntegrated <- Ryacas::Integrate.default(f = KDerive$text,
x = x,
a = lowBound,
b = upBound)
as.character.Sym(KDerivIntegrated)
Ryacas::Eval(yacas(KDeriveIntegrated))
Ryacas::Eval(yacas(KDerivIntegrated))
?Eval
as.character.Sym(KDerivIntegrated)
Ryacas::Eval(yacas(KDerivIntegrated))
class(KDerivIntegrated)
print(yacas("TeXForm(KDerivIntegrated)"))
kDerivIndefiniteIntegral <- Ryacas::Integrate.default(f = KDerive$tex,
x = x)
print(yacas(kDerivIndefiniteIntegral))
print(yacas("TeXForm(kDerivIndefiniteIntegral)"))
kDerivIndefiniteIntegralAsCh <- Ryacas::as.character.Expr(kDerivIndefiniteIntegral)
kDerivIndefiniteIntegralAsCh
yacas("TeXForm(kDerivIndefiniteIntegralAsCh)", retclass = "unquote")
kDerivIndefiniteIntegralAsCh <- Ryacas::as.character.Expr(kDerivIndefiniteIntegral)
kDerivIndefiniteIntegralAsCh
kDerivIndefiniteIntegral <- Ryacas::Integrate.default(f = KDerive$text,
x = x)
print(yacas(kDerivIndefiniteIntegral))
print(yacas("TeXForm(kDerivIndefiniteIntegral)"))
print(yacas("TeXForm(kDerivIndefiniteIntegral)"))
yacas("TeXForm(kDerivIndefiniteIntegral)")
print(yacas("PrettyForm(kDerivIndefiniteIntegral)"))
?yacas
kDerivIndefiniteIntegralAsCh <- Ryacas::as.character.Expr(kDerivIndefiniteIntegral)
kDerivIndefiniteIntegralAsCh
print(yacas("TeXForm(kDerivIndefiniteIntegralAsCh)"))
print(yacas("PrettyForm(kDerivIndefiniteIntegralAsCh)"))
